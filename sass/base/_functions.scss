/*
 * Vertical align anything
 */
%vertical-align {
  position: relative;
  top: 50%;
  @include transform(translateY(-50%));
  .lt-ie9 & {top: 35%;}
}

/*
 * Pixels to em
 */
@function pem($pxval, $base: 16) {
  @if (unitless($pxval)) {
    $pxval: $pxval * 1px;
  }

  @if (unitless($base)) {
    $base: $base * 1px;
  }

  @return $pxval / $base * 1em;
}

/*
 * Generate sprite, directly also for retina devices
 */
// https://gist.github.com/alanhogan/2878758


/*
 * Responsive breakpoints
 */
@mixin breakpoint($point) {
  @if $point == large {
    @media (max-width: 64.375em) { @content; }
  }
  @else if $point == medium {
    @media (max-width: 50em) { @content; }
  }
  @else if $point == small {
    @media (max-width: 767px)  { @content; }
  }
}

/*
 * Display inline-block
 */
@mixin inline-block {
  display: -moz-inline-stack;display: inline-block;vertical-align: top;zoom: 1;*display: inline; 
}

/*
 * Sprite background
 */
@mixin sprite-background($name, $folder) {
  $sprites: sprite-map("#{$folder}/*.png");
  $sprites-retina: sprite-map("#{$folder}@2x/*.png");

  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name);
  background-repeat: no-repeat;
  @include inline-block;
  height: image-height(sprite-file($sprites, $name));
  width: image-width(sprite-file($sprites, $name));
  @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 2) {
    $ypos: round(nth(sprite-position($sprites-retina, $name), 2) / 2);
    background-position: 0 $ypos;
    background-size: image-width(sprite-file($sprites, $name)) auto;
    background-image: sprite-url($sprites-retina);
  }
}