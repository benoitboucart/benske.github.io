{"content":"<p>{% comment %}\ncover: mouse.jpg\nimage_credit: “© Startup Stock Photos”\n{% endcomment %}</p>\n\n<p>An example of this trick can be seen on the <a href=\"http://jeet.gs/\">Jeet Grid System website</a>. When you scroll down, you see that CSS transform animations are triggered.</p>\n\n<p>For this purpose, there are several Javascript / <strong>jQuery plugins</strong> available. One example of such plugin is <a href=\"http://mynameismatthieu.com/WOW/\">WOW</a>. In this tutorial I’ll show how you can achieve this effect without a plugin.</p>\n\n<h2 id=\"the-markup\">The markup</h2>\n<p>So let’s begin. First of all the markup. The <code>revealOnScroll</code> class must be added to the elements that will be animated on scroll:</p>\n\n<p>{% highlight html linenos %}\n&lt;div data-animation=\"flipInX\" data-timeout=\"400\"&gt;…some content here…\n{% endhighlight %}</p>\n\n<p>The <code>data-animation</code> attribute declares the <code>animate.css</code> animation that will be used. It’s also possible to add an extra optional timeout, that could be useful when multiple elements are animated at the same position (see <a href=\"http://cdpn.io/yJoqz\">the demo</a> for an example of this).</p>\n\n<h2 id=\"the-javascript--css-animations\">The Javascript &amp; CSS animations</h2>\n<p>Then, we need to declare some variables at the top of the Javascript document (don’t forget to load jQuery &amp; Modernizr – needed to check if it’s a “touch” device). I also imported animate.css for the <strong>CSS based animations</strong>.</p>\n\n<p>{% highlight javascript linenos %}\n  var $window           = $(window),\n      win_height_padded = $window.height() * 1.1,\n      isTouch           = Modernizr.touch;\n{% endhighlight %}</p>\n\n<p>Then we have to watch for the <code>scroll</code> event that will be triggered when the user is scrolling:</p>\n\n<p>{% highlight javascript linenos %}\n  $window.on(‘scroll’, revealOnScroll);\n{% endhighlight %}</p>\n\n<p>In the <code>revealOnScroll</code> function we check if the element that must be animated is becoming visible. If so, the <strong>animation class</strong> is added and that will trigger the CSS animation.</p>\n\n<p>{% highlight javascript linenos %}\n  function revealOnScroll() {\n    var scrolled = $window.scrollTop();\n    $(“.revealOnScroll:not(.animated)”).each(function () {\n      var $this     = $(this),\n          offsetTop = $this.offset().top;</p>\n\n<pre><code>  if (scrolled + win_height_padded &gt; offsetTop) {\n    if ($this.data('timeout')) {\n      window.setTimeout(function(){\n        $this.addClass('animated ' + $this.data('animation'));\n      }, parseInt($this.data('timeout'),10));\n    } else {\n      $this.addClass('animated ' + $this.data('animation'));\n    }\n  }\n}); {% endhighlight %}\n</code></pre>\n\n<p>Isn’t that easy to achieve? There is also another check for the inverse: when the elements becomes invisible the <strong>animation classes are removed</strong>. This will make it possible to animate the items more then one time per request.</p>\n\n<p><a href=\"http://cdpn.io/yJoqz\">View the demo</a></p>\n"}
